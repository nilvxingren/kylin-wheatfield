<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
    default-autowire="byName" default-lazy-init="true">
	
  
  <context:property-placeholder location="classpath:betaa/db.properties" ignore-unresolvable="true"/>  
   <bean id="accountDataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
            <property name="driver" value="${database.driverClassName}"/>
            <property name="driverUrl" value="${database.url}"/>
            <property name="user" value="${database.username}"/>
            <property name="password" value="${database.password}"/>
            <!-- 测试的SQL执行语句 -->
           <property name="houseKeepingTestSql" value="select 1 from dual"/>
            <!-- 最少保持的空闲连接数 （默认2个） -->
             <property name="prototypeCount" value="2"/>
            <!-- proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒） -->
            <property name="houseKeepingSleepTime" value="100000"/>
            <!-- 最大活动时间(超过此时间线程将被kill,默认为5分钟) -->
             <property name="maximumActiveTime" value="3600000"/>
            <!-- 连接最长时间(默认为4个小时) -->
            <property name="maximumConnectionLifetime" value="18000000"/>
            <!-- 最小连接数 （默认2个） -->
            <property name="minimumConnectionCount" value="5"/>
            <!--最大连接数(默认5个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由maximum-new-connections决定 --> 
            <property name="maximumConnectionCount" value="200"/>
            <property name="testBeforeUse" value="true"/>
            <!-- 是指在任一时刻，可以（同时）建立的最大连接数，也就是说，就是已经请求的、但还没可用的新连接数量--> 
            <property name="simultaneousBuildThrottle" value="100"/>
           <!-- 备用连接数 -->
<!--             <property name="fatalSqlExceptionWrapperClass" value="org.logicalcobwebs.proxool.FatalRuntimeException"></property> -->
            <!-- -->
<!--             <property name="statistics" value="${proxool.statistics}"/> -->
            <!-- -->
<!--             <property name="simultaneousBuildThrottle" value="${proxool.simultaneous-build-throttle}"/> -->
     </bean>	

	<!-- 整合mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="accountDataSource" />
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
	</bean>
	
	<bean class="com.rkylin.database.BaseDao">
		<property name="batchSqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	

<!-- 	配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="accountDataSource" />
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="accountDataSource" />

	<bean id="txTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="txManager" />
	</bean>

		<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="NESTED" rollback-for="Exception.class" read-only="false"/>
      		<tx:method name="insert*" propagation="NESTED" rollback-for="Exception.class"  read-only="false"/>
      		<tx:method name="update*" propagation="NESTED" rollback-for="Exception.class" read-only="false"/>
      		<tx:method name="save*" propagation="NESTED" rollback-for="Exception.class" read-only="false"/>
      
      		<tx:method name="find*" propagation="SUPPORTS"/>
	        <tx:method name="get*" propagation="SUPPORTS"/>
	        <tx:method name="select*" propagation="SUPPORTS"/>
		</tx:attributes>
 	</tx:advice>
 	
 	 <aop:config>    
      <aop:pointcut id="point-cut"  expression= "execution(* com.rkylin.wheatfield.service.impl.*.*(..))" />
      <aop:advisor advice-ref="txAdvice"  pointcut-ref= "point-cut" />    
    </aop:config>
 	<aop:aspectj-autoproxy expose-proxy="true"/> 
</beans>